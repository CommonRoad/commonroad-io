stages:
  - style_check
  - test
  - deploy

default:
  image: python:3.13
  before_script:
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install --with tests
    - source .venv/bin/activate

.run-test-with-coverage: &run-test-with-coverage
  - apt-get update && apt-get install -y ffmpeg
  - coverage run --source ./commonroad tests/run_tests.py
  - coverage report -m || true

lint_flake8:
  stage: style_check
  before_script:
    - pip install pre-commit
  script:
    - pre-commit run --all-files --show-diff-on-failure

build_and_test_python:
  image : python:$PYTHON_VERSIONS
  stage: test
  parallel :
    matrix :
      - PYTHON_VERSIONS : [ "3.9", "3.10", "3.11", "3.12" ]
  script:
    - *run-test-with-coverage
  needs: []

build_and_test_python_arm:
  image : arm64v8/python:$PYTHON_VERSIONS
  tags :
    - arm
  stage: test
  parallel :
    matrix :
      - PYTHON_VERSIONS : [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
  script:
    - *run-test-with-coverage
  needs: []

build_and_test_python_3_13:
  image: python:3.13
  stage: test
  script:
    - *run-test-with-coverage
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build_and_update_packages_arm:
  image : arm64v8/python:$PYTHON_VERSIONS
  tags :
    - arm
  stage: test
  parallel :
    matrix :
      - PYTHON_VERSIONS : [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
  script:
    - poetry update
    - poetry install
  needs: []

build_and_update_packages_debian:
  image : python:$PYTHON_VERSIONS
  stage: test
  parallel :
    matrix :
      - PYTHON_VERSIONS : [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
  script:
    - poetry update
    - poetry install
  needs: []

build_doc:
  stage: test
  script:
    - apt-get update && apt-get install -y graphviz
    - poetry install --with docs
    - cd doc && make html SPHINXOPTS="-W"
  artifacts:
    paths:
      - ./doc/build/
    expose_as: 'Documentation'

validate_tutorials:
  stage: test
  image : python:3.12  # needs to be updated when cvxpy supports python 3.13
  script:
    - poetry install --with tutorials
    - pytest --nbval-lax ./tutorials/

pages:
  # Push the latest documentation of the development branch to the GitLab Pages
  # available at https://cps.pages.gitlab.lrz.de/commonroad-template
  stage: deploy
  only:
    - dev
  publish: site
  script:
    - poetry install --with docs
    - mkdocs build
  artifacts:
    paths:
      - site
  environment:
    name: Gitlab Pages
    url: https://cps.pages.gitlab.lrz.de/commonroad-io/

push_to_internal_pipy_registry:
  # push the development version to the internal pipy registry https://gitlab.lrz.de/cps/commonroad-io/-/packages
  # before manually triggering the job, delete the previous package in case the version number didn't change
  stage: deploy
  when: manual
  only:
    - develop
  script:
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry build
    - poetry publish --repository gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN}

push_to_external_pipy_test_registry:
  stage: deploy
  when: manual
  only:
    - master
  script:
    - poetry config repositories.test https://test.pypi.org/legacy/
    - poetry build
    - poetry publish --repository test -u __token__ -p ${CR_PYPI_TEST_API_TOKEN}

push_to_external_pipy_release_registry:
  stage: deploy
  when: manual
  only:
    - master
  script:
    - poetry build
    - poetry publish -u __token__ -p ${CR_PYPI_RELEASE_API_TOKEN}
